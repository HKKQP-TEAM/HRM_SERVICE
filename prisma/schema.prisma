// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id           String   @id @default(uuid())
  name         String
  emailContact String   @unique
  phoneNumber  String
  logo         String?
  slogan       String?
  address      String
  updatedAt    DateTime @default(now())
  createdAt    DateTime @default(now())
  createdBy    String
  updatedBy    String

  @@map(name: "company")
}

model Contact {
  id                String   @id @default(uuid())
  nativePlace       String
  currentWhereabout String
  phoneNumber       String
  emailContact      String   @unique
  updatedAt         DateTime @default(now())
  createdAt         DateTime @default(now())
  createdBy         String
  updatedBy         String
  employeeId        String
  employee          Employee @relation(fields: [employeeId], references: [id])

  @@map(name: "contact")
}

model Department {
  id             String     @id @default(uuid())
  departmentName String
  description    String?
  location       String?
  updatedAt      DateTime   @default(now())
  createdAt      DateTime   @default(now())
  createdBy      String
  updatedBy      String
  employees      Employee[]

  @@map(name: "department")
}

enum JobType {
  Full
  Part
}

enum Gender {
  Male
  Female
  Other
}

model Employee {
  id            String        @id @default(uuid())
  email         String        @unique
  firstName     String
  lastName      String
  idNumber      String?
  title         String
  job           JobType
  gender        Gender
  birthday      DateTime
  roleId        String
  role          Role          @relation(fields: [roleId], references: [id])
  departmentId  String
  department    Department    @relation(fields: [departmentId], references: [id])
  contact       Contact[]
  updatedAt     DateTime      @default(now())
  createdAt     DateTime      @default(now())
  createdBy     String
  updatedBy     String
  startAt       DateTime      @default(now())
  endAt         DateTime?
  salaries      Salary[]
  totalSalaries TotalSalary[]
  workingTime   WorkingTime[]
  user          User?
  jobs          EmployeeJob[]

  @@map(name: "employee")
}

enum EmployeeJobStatus {
  Pending
  Blocked
  Accepeted
}

model EmployeeJob {
  id         String            @unique @default(uuid())
  jobId      String
  jobJob     Job               @relation(fields: [jobId], references: [id])
  employeeId String
  employee   Employee          @relation(fields: [employeeId], references: [id])
  status     EmployeeJobStatus
  updatedAt  DateTime          @default(now())
  createdAt  DateTime          @default(now())
  createdBy  String
  updatedBy  String
  startAt    DateTime          @default(now())
  endAt      DateTime?

  @@id([jobId, employeeId])
  @@map(name: "employee_job")
}

model Holiday {
  id          String   @id @default(uuid())
  eventName   String
  description String?
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())
  startAt     DateTime
  endAt       DateTime
  createdBy   String
  updatedBy   String

  @@map(name: "holiday")
}

enum JobStatus {
  Pending
  Blocked
  Accepeted
  Finished
}

enum JobCustom {
  Basic
  Custom
}

model Job {
  id               String        @id @default(uuid())
  name             String
  requiement       String
  numberOfEmployee Int
  status           JobStatus
  custom           JobCustom
  salary           Decimal
  updatedAt        DateTime      @default(now())
  createdAt        DateTime      @default(now())
  createdBy        String
  updatedBy        String
  startAt          DateTime      @default(now())
  endAt            DateTime?
  employees        EmployeeJob[]

  @@map(name: "job")
}

model NotifyUser {
  id        String   @unique @default(uuid())
  uid       String
  user      User     @relation(fields: [uid], references: [id])
  notifyId  String
  notify    Notify   @relation(fields: [notifyId], references: [id])
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  createdBy String?
  updatedBy String?

  @@id([uid, notifyId])
  @@map(name: "notify_user")
}

model Notify {
  id          String       @id @default(uuid())
  title       String?
  content     String?
  updatedAt   DateTime     @default(now())
  createdAt   DateTime     @default(now())
  notifyUsers NotifyUser[]

  @@map(name: "notify")
}

model Role {
  id          String     @id @default(uuid())
  roleName    String
  description String?
  updatedAt   DateTime   @default(now())
  createdAt   DateTime   @default(now())
  createdBy   String
  updatedBy   String
  employees   Employee[]

  @@map(name: "role")
}

model Salary {
  id          String   @id @default(uuid())
  employeeId  String
  employee    Employee @relation(fields: [employeeId], references: [id])
  description String?
  salary      Decimal
  updatedAt   DateTime @default(now())
  createdAt   DateTime @default(now())
  createdBy   String
  updatedBy   String

  @@map(name: "salary")
}

model TotalSalary {
  id          String    @id @default(uuid())
  employeeId  String
  employee    Employee  @relation(fields: [employeeId], references: [id])
  totalSalary Decimal
  workingTime Int
  startAt     DateTime  @default(now())
  endAt       DateTime?
  updatedAt   DateTime  @default(now())
  createdAt   DateTime  @default(now())
  createdBy   String
  updatedBy   String

  @@map(name: "total_salary")
}

enum UserRole {
  Admin
  Manager
  Employee
}

model User {
  id              String       @id @default(uuid())
  employeeId      String?      @unique
  employee        Employee?    @relation(fields: [employeeId], references: [id])
  email           String       @unique
  username        String       @unique
  password        String
  lastActivity    DateTime     @default(now())
  avatar          String?
  emailVerifiedAt DateTime?
  disabledAt      DateTime?
  role            UserRole
  updatedAt       DateTime     @default(now())
  createdAt       DateTime     @default(now())
  notifyUsers     NotifyUser[]

  @@map(name: "user")
}

enum WorkingTimeStatus {
  Pending
  Approved
  Blocked
}

model WorkingTime {
  id         String            @id @default(uuid())
  employeeId String
  employee   Employee          @relation(fields: [employeeId], references: [id])
  comment    String?
  status     WorkingTimeStatus
  startAt    DateTime          @default(now())
  endAt      DateTime?

  @@map(name: "working_time")
}

model Invitation {
  id         String   @id @default(uuid())
  role       UserRole
  employeeId String   @unique

  @@map(name: "invitation")
}
